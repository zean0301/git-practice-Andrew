# GIT介紹

* ## GIT發展簡史

2005年，安德魯·垂鳩（Andrew Tridgell）寫了一個簡單程式，可以連接BitKeeper的儲存庫，BitKeeper著作權擁有者拉里·麥沃伊認為安德魯·垂鳩對BitKeeper內部使用的協定進行逆向工程，決定收回無償使用BitKeeper的授權。Linux核心開發團隊與BitMover公司進行磋商，但無法解決他們之間的歧見。林納斯·托瓦茲決定自行開發版本控制系統替代BitKeeper，以十天的時間編寫出git第一個版本。

* ## 為何選擇使用GIT
Git 可以保留修改前修改中修改後的這些歷史紀錄，就可以隨時取得修改前修改中修改後的版本，以達到安全且快速備份檔案的目的。

且GIT具有以下優點：
1. 強力支援非線性開發模式 (分散式開發模式)
1. 相容於現有作業系統
1. 有效率的處理大型專案
1. 歷史紀錄保護
1. 以工具集為主的設計 (Toolkit-based design)
1. 彈性的合併策略 (Pluggable merge strategies)
1. 被動的垃圾回收機制
1. Git 的設計架構讓開發者能碰到底層、進行更彈性的開發
1. GitHub 是全世界最受歡迎的程式碼管理/分享網站
1. 免費

* ## 什麼是版本控制

版本控制是維護工程藍圖的標準做法，能追蹤工程藍圖從誕生一直到定案的過程。此外，版本控制也是一種軟體工程技巧，藉此能在軟體開發的過程中，確保由不同人所編輯的同一程式檔案都得到同步。

# 版本控制的邏輯說明


在開發過程中可能會遇到以下情形：

1. 檔案被別人或自己覆蓋
1. 檔案遺失
1. 想要比對各版本之間的程式碼有何不同
1. 想要回到之前修改的版本

如果有以上情形，你需要對專案進行版本控制，透過GIT你可以：

1. 隨時復原錯誤，就好像是專案的時光回溯器，可以將檔案恢復到以前的任何時候的版本；
1. 多人同時修改同一份程式碼，不會有相互覆蓋的情況；
1. 保留所有修改的歷程，如果你發現自己的程式碼有被別人更動過，可以很容易找到是誰更改的，以及何時更改的；
1. 在發行正式版的同時，還能繼續發展新版本，無須下令凍結所有程式碼。

# Git 常用指令集介紹

|指令|用途|
|---|----|
|git init|建立新的本地端 Repository|
|git clone [Repository URL]|複製遠端的 Repository 檔案到本地端|
|git status|檢查本地端檔案異動狀態|
|git add [檔案或資料夾]|將指定的檔案（或資料夾）加入版本控制。用 git add . 可加入全部|
|git commit|提交（commit）目前的異動|
|git log|查看先前的 commit 記錄|
|git push|將本地端 Repository 的 commit 發佈到遠端|
|git pull | 將檔案從遠端抓取下來|
|git branch|查看分支|
|git branch [BRANCH_NAME]|建立分支|
|git checkout [BRANCH_NAME]|取出指定的分支|
|git checkout -b [BRANCH_NAME]|建立並跳到該分支|
|git branch -D [BRANCH_NAME]|強制刪除指定分支|

# .gitignore 配置
只要符合 ignore 檔案的設定，就會被 git 視為不用追蹤的檔案

# 分支的使用方法
## 為什麼要使用分支
在實務開發上，因為有些開發版本是屬於「上線穩定版」、「測試版本」、「修改 BUG 版本」等多種版本，但我們不能將這些版本混在一起，這樣會導致管理不易。因此分支可以讓每一條線都各司其職，做完事後，再將兩條線的功能合併，並部署上線。
## 分支的使用方法
1. 透過 ```git branch xxx``` 新增分支
1. 透過 ```git checkout xxx``` 切換分支
1. 在新的分支中進行編輯
1. 透過 ```git checkout master``` 切回預設分支
1. 透過 ```git merge xxx``` 將xxx分支合併至master中
# Commit 介紹及使用
1. 工作區workspace

就是你的工作區域，對檔案的任何更動會第一手的直接反應在這邊。這時候檔案會處於tracked、untracked、modified、unmodified其中之一的狀態。

2. 暫存區staging area

經過```git add```之後，檔案會跑到暫存區內。這時候檔案會處於staged的狀態。

3. local repository

經過```git commit```之後，檔案就會被正式地存入local repository之中。

4. remote repository

經過```git push```之後，本地端的檔案就會被存入remote repository，像是Github、Gitlab之類的網站。
# GitFlow 介紹

是最早出現的一套流程，且廣泛被應用。

Git flow 提出不同的分支功能，分別有 master、develop 、hotfix、release、feature 五種分支。

* 長期分支 - master 分支、develop 分支

原因：因 Master 與 Develop 分支會一直存活在整個 Git flow 裡，並不會被刪除掉。

* 短期分支 - hotfix 分支、release 分支、feature 分支

原因：當完成專案後，這些更新的版本都會被合併進 Master 或 Develop 分支 ，之後就會被刪除掉。

---

* Master 分支：master 是當 Git 建立版本控制時，就預設的分支，主要用來放穩定、隨時可上線的版本。

* Develop 分支：作為主要開發的分支，是所有短期分支的基礎分支。

* Hotfix 分支：主要功能是用來進行修復

* Release 分支：在 Develop 分支發布正式版本到 Master 分支之前，可以先進行一個預備發布的本版本進行測試。

* Feature 分支：主要用來新增功能的分支。
